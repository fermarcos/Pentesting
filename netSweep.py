#!/usr/bin/python
#Parra Arroyo Fernando Marcos
#16-03-17
#
#Programa que obtiene la red local del dispositivo donde se ejecuta y devuelve en 
#pantalla los hosts que se encuentran activos en la red
#
#Requerimientos
#	pip install scapy
#	pip install netaddr	
#
#Ejemplo de uso
#	python netSweep.py
#
import subprocess
from netaddr import *
from scapy.all import *

#Funcion que obtiene la interfaz de red y el netID de la red
def obtenRed():
	direccion = { 'interfaz':'','ip':'', 'mascara':''}
	#se obtiene la interfaz de red
	ruteo=str(subprocess.check_output('route -n | grep UG',shell=True,universal_newlines=True)).split()[7]
	#se obtiene la informacion correspondiente a ipv4 de la interfaz obtenida anteriormente
	ifaz=subprocess.check_output('ifconfig ' + ruteo + '|grep "inet"',shell=True,universal_newlines=True).split()
	direccion['interfaz']=ruteo
	direccion['ip']=ifaz[1][5:]
	direccion['mascara']=ifaz[3][5:]

	print('Interfaz: '+direccion['interfaz'])
	#se obtienen los bits usados para la mascara
	bitsMasK= IPAddress(direccion['mascara']).netmask_bits()
	networkID=direccion['ip']+"/"+str(bitsMasK)


	ip = IPNetwork(networkID)
	
	IDRED = str(ip.network)+"/"+str(bitsMasK)
	print "NetID:\t",IDRED

	return direccion['interfaz'],IDRED

def scanARP(interfaz,ips):
	#se utiliza el metodo de ARP ping para descubrir los host de la red local, el paquete ARP se envia por 
	#broadcast a las ip de la red local por la interfaz seleccionada
	ans,unans = srp(Ether(dst = "ff:ff:ff:ff:ff:ff")/ARP(pdst = ips), timeout = 2, iface = interfaz ,inter= 0.1)
	#se muestran los hosts que respondieron al mensaje ARP
	for snd,rcv in ans:
	    print(rcv.sprintf("Host %ARP.psrc% UP"))
	print("\nEscaneo completado")


interface,ips=obtenRed()
scanARP(interface,ips)